<?php
/**
 * Functions.php contains all the core functions for your theme to work properly.
 * Please do NOT edit this file!! (Unless you REALLY know what you are doing of course.)
 *
 * @package Podcaster
 * @since 1.0
 */
//Adds the local field
function overload_field_typography_input_path($field) {
    return get_theme_file_path( '/includes/custom-fields/typography-input/field_typography_input.php' );
}
add_filter( "redux/podcaster-theme/field/class/typography_input", "overload_field_typography_input_path" ); 


/**
 * Sets up the content width value based on the theme's design and stylesheet.
 */
if ( ! isset( $content_width ) ) {
	$content_width = 850;
}

/**
 * themestation_setup()
 * Sets up Podcaster
 *
 * @since 1.0
 */
if( ! function_exists('themestation_setup') ) {
	function themestation_setup() {
		// Translation
		load_theme_textdomain( 'podcaster', get_template_directory() . '/lang' );

		// Adds RSS feed links to <head> for posts and comments.
		add_theme_support( 'automatic-feed-links' );

		//Activates and lists the post formats to be used.
		add_theme_support(
			'post-formats', array(
				'gallery',
				'image',
				'link',
				'video',
				'audio',
				'quote',
				'aside',
				'status',
				'chat'
			)
		);

		// This theme uses wp_nav_menu() in one location.
		register_nav_menu( 'header-menu', __( 'Header Menu', 'podcaster' ) );
		register_nav_menu( 'footer-menu', __( 'Footer Menu', 'podcaster' ) );

		// Adds custom metaboxes
		if( ! class_exists( 'PodMedia' ) ){
			include_once( get_template_directory() . '/includes/pod-metaboxes-media.php' );
		} else {
			include_once( get_template_directory() . '/includes/pod-metaboxes.php' );
		}

		// This theme uses Redux Theme Options to manage theme settings. We'll include it here.
		if ( class_exists('ReduxFramework') ) {
			include_once( get_template_directory() . '/options-config.php' );
		} 

		// This theme uses a custom image size for featured images, displayed on "standard" posts.
		add_theme_support( 'post-thumbnails' );

		// WordPress will handle the <title> tag, it is not hard-coded.
		add_theme_support( 'title-tag' );

		add_image_size( 'regular', 624, 9999, true ); // Unlimited height, hard crop
		add_image_size( 'audio-thumb', 720, 480, true ); // hard crop
		add_image_size( 'audio-thumb-2', 480, 720, true ); // hard crop
		add_image_size( 'audio-thumb-vert-large', 720, 1080, true ); // hard crop

		add_image_size( 'highlight', 500, 9999 ); // Unlimited height, soft crop
		add_image_size( 'regular-large', 1140, 9999 ); // Unlimited height, soft crop

		add_image_size( 'square', 400, 400, true ); // Square, hard crop
		add_image_size( 'square-large', 700, 700, true ); // Square, hard crop
		add_image_size( 'slideshow', 1920, 480 ); // Horizontal, soft crop

		// Custom Logo
		add_theme_support( 'custom-logo' );

		

		

	}
}
add_action( 'after_setup_theme', 'themestation_setup' );


if( ! function_exists('pod_widget_block_editor') ) {
	function pod_widget_block_editor() {
		$wp_current_version = get_bloginfo( 'version' );

		if($wp_current_version >= '5.8') {
			// Disable Widget Block Editor
			remove_theme_support( 'widgets-block-editor' );
		}
	}
}
add_action( 'after_setup_theme', 'pod_widget_block_editor' );



if( ! function_exists('pod_admin_about_menu') ) {
	function pod_admin_about_menu() {

		global $pagenow;

		// Podcast Option Page (for changelog and updates)
		if ( is_admin() ) {
			include_once( get_template_directory() . '/includes/info-page/podcaster-info.php' );
		}

		// Re-direct to theme info page after activation.
		if ( is_admin() && isset( $_GET['activated'] ) && $pagenow == 'themes.php' ) {
		    wp_redirect( admin_url( 'admin.php?page=pod-theme-options' ) );
		    exit;
		}


	}
}
add_action( 'after_setup_theme', 'pod_admin_about_menu', 20 );


/**
 * pod_custom_excerpt_length()
 * Custom Excerpt Length
 *
 * @param string $length
 * @return string - length of excerpt
 * @since Podcaster 1.0
 */
if( ! function_exists('pod_custom_excerpt_length') ) {
	function pod_custom_excerpt_length( $length ) {
		return 35;
	}
}
add_filter( 'excerpt_length', 'pod_custom_excerpt_length', 999 );

/**
 * pod_new_excerpt_more()
 * Custom Read More
 *
 * @param string $more
 * @return string - what will appear before exceprt cuts off
 * @since Podcaster 1.0
 */
if( ! function_exists('pod_new_excerpt_more') ) {
	function pod_new_excerpt_more( $more ) {
		return '...';
	}
}
add_filter('excerpt_more', 'pod_new_excerpt_more');

/**
 * pod_the_post_thumbnail_caption()
 * Featured Image Caption
 *
 * @return string $script - featured image caption
 * @since Podcaster 1.0
 */
if( ! function_exists('pod_the_post_thumbnail_caption') ) {
	function pod_the_post_thumbnail_caption() {
	  global $post;

	  $thumbnail_id    = get_post_thumbnail_id($post->ID);
	  $thumbnail_image = get_posts(array('p' => $thumbnail_id, 'post_type' => 'attachment'));
	  if ( isset( $thumbnail_image[0] ) && $thumbnail_image[0] != '' ) {

		  $excerpt = $thumbnail_image[0]->post_excerpt;

		  if ( isset( $excerpt ) && $excerpt != '' ) {
		    return '<div class="image-caption">'.$excerpt.'</div>';
		  } else {
		  	return '';
		  }
		}
	}
}

if( ! function_exists( 'pod_get_current_screen' ) ) {
	function pod_get_current_screen() {
		global $pagenow;

		if ( $pagenow == 'post.php' || $pagenow == 'post-new.php' ) {
		    return true;
		}
		return false;
	}
}
add_action( 'current_screen', 'pod_get_current_screen' );


 /**
 * pod_admin_scripts()
 * Manages which scripts to load depending on whether Gutenberg is active or not
 *
 * @since Podcaster 1.7.8
 */
if( ! function_exists('pod_admin_scripts') ) {
	function pod_admin_scripts(){
		$scriptsrc = get_template_directory_uri() . '/js/';
		$current_screen = get_current_screen();


		/* Check if Podcaster Media plugin is active. */
		if ( pod_get_current_screen() ) {

			if( ! class_exists( 'PodMedia' ) ){

			    if ( pod_is_gutenberg_active() ) {

					/* Gutenberg Admin Scripts */
					wp_enqueue_script( 'pod-admin-gutenberg-media-js', $scriptsrc . 'admin-metabox-gutenberg-media.js', array('jquery'), '1.0', true );
					wp_enqueue_script( 'pod-admin-gutenberg-js', $scriptsrc . 'admin-metabox-gutenberg.js', array('jquery'), '1.0', true );

				} else {

					/* Admin Scripts */
					wp_enqueue_script( 'pod-admin-media-js', $scriptsrc . 'admin-metabox-media.js', array('jquery'), '1.0', true );
					wp_enqueue_script( 'pod-admin-js', $scriptsrc . 'admin-metabox.js', array('jquery'), '1.0', true );

				}
			} else {
				if ( pod_is_gutenberg_active() ) {

					/* Gutenberg Admin Scripts */
					wp_enqueue_script( 'pod-admin-gutenberg-js', $scriptsrc . 'admin-metabox-gutenberg.js', array('jquery'), '1.0', true );

				} else {
					/* Admin Scripts */
					wp_enqueue_script( 'pod-admin-js', $scriptsrc . 'admin-metabox.js', array('jquery'), '1.0', true );

				}

			}

		}
	}
}
add_action( 'admin_enqueue_scripts', 'pod_admin_scripts' );


 /**
 * pod_load_styles_scripts_HTML5()
 * Theme support for <script> and <style> that is HTML5 valid.
 *
 * @since Podcaster 1.9.2
 */
add_action('after_setup_theme', 'pod_load_styles_scripts_HTML5');
if( ! function_exists('pod_load_styles_scripts_HTML5')) {
    function pod_load_styles_scripts_HTML5() {
    	$wp_version = get_bloginfo( 'version' );
    	
    	if( $wp_version >= 5.3) {
        	add_theme_support( 'html5', [ 'script', 'style' ] );
        }
    }
}


 /**
 * themestation_scripts_styles()
 * Enqueues scripts and styles for front-end.
 *
 * @since Podcaster 1.0
 */
if( ! function_exists('themestation_scripts_styles') ){
	function themestation_scripts_styles() {
		global $wp_styles;
		$wp_version = get_bloginfo( 'version' );

		$pod_rtl = pod_theme_option( 'pod-reading-direction', false );
		/*
		 * Adds JavaScript to pages with the comment form to support
		 * sites with threaded comments (when in use).
		 */
		if ( is_singular() && comments_open() && get_option( 'thread_comments' ) )
			wp_enqueue_script( 'comment-reply' );


		/* Loads Default Fonts */
		wp_enqueue_style( 'default-fonts', get_template_directory_uri() . '/fonts/default/stylesheet.css' );

		/* Loads Font Awesome 5.9.0 */
		wp_enqueue_style( 'themestation-fontawesome', get_template_directory_uri() . '/css/all.min.css' );

		/* Loads jQuery plugins stylesheets. */
		wp_enqueue_style( 'themestation-flexslider', get_template_directory_uri() . '/css/flexslider.css' );

		wp_enqueue_style( 'themestation-lightbox', get_template_directory_uri() . '/css/lightbox.css' );

		/* Media Player */
		if( $wp_version >= 4.1 ) {
			wp_enqueue_style( 'themestation-media-player-new', get_template_directory_uri() . '/css/media-player-new.css' );
		} elseif( $wp_version <= 4.0 ) {
			wp_enqueue_style( 'themestation-media-player-old', get_template_directory_uri() . '/css/media-player-4-0-older.css' );
		}


	  	/* Loads custom scrollbar stylesheet */
		wp_enqueue_style( 'contscr-css', get_template_directory_uri() . '/css/jquery.mCustomScrollbar.css' );

		/* Loads our main stylesheet. */
		wp_enqueue_style( 'themestation-style', get_stylesheet_uri() );
		wp_enqueue_style( 'pod-responsive', get_template_directory_uri() . '/css/responsive.css' );

		/* Load RTL stylesheet*/
		if( $pod_rtl == true ) {
			wp_enqueue_style( 'pod-rtl-css', get_template_directory_uri() . '/css/rtl.css' );
		}
		/* Loads dark or light stylesheet */
		$pod_templ_color = pod_theme_option( 'pod-color-darklight', 'classic' );
		if( $pod_templ_color == "dark" ) {
			wp_enqueue_style( 'podcaster-dark', get_template_directory_uri() . '/css/dark.css');
		}

		if( $wp_version <= 4.0 ) {
			wp_deregister_style('wp-mediaelement');
		}

		// If Ajax loading is on
		$pod_fp_button_type = pod_theme_option( 'pod-front-page-button-type', 'list-of-posts-none' );

		if( $pod_fp_button_type == 'list-of-posts-ajax' ) {
			wp_enqueue_style( 'wp-mediaelement' );
			wp_enqueue_script( 'wp-playlist' );
			wp_enqueue_script( 'wp-mediaelement' );
			wp_enqueue_script( 'mediaelement-and-player' );

		}

	}
}
add_action( 'wp_enqueue_scripts', 'themestation_scripts_styles' );


/**
 * Add an HTML class to MediaElement.js container elements to aid styling.
 *
 * Extends the core _wpmejsSettings object to add a new feature via the
 * MediaElement.js plugin API.
 */
if( ! function_exists( 'pod_mejs_add_container_class' ) ) {
	function pod_mejs_add_container_class() {
		if ( ! wp_script_is( 'mediaelement', 'done' ) ) {
			return;
		}
		?>
		<script>
		(function() {
			var settings = window._wpmejsSettings || {};
			settings.features = settings.features || mejs.MepDefaults.features;
			var podDefaults = mejs.MepDefaults;
			
			settings.features.push( 'podplayerwrapper' );

			MediaElementPlayer.prototype.buildpodplayerwrapper = function( player ) {
				if ( player.container.hasClass( 'mejs-container' ) ) {
					player.controls.wrapInner( "<div class='pod-mejs-controls-inner'></div>" );
            	}
			};
			
		})();

		</script>
		<?php
	}
}
add_action( 'wp_print_footer_scripts', 'pod_mejs_add_container_class' );


if( ! function_exists( 'pod_custom_audio_volume' ) ) {
	function pod_custom_audio_volume( $settings ) {
		$pod_audio_player_volume = pod_theme_option('pod-audio-players-volume', 'horizontal');

		if( $pod_audio_player_volume == 'vertical' ) {
			$settings['audioVolume'] = 'vertical';
		}
		
	    return $settings;
	}
}
add_filter('mejs_settings', 'pod_custom_audio_volume');

/**
 * pod_load_javascript_files()
 * Load Front-End jS Scripts.
 *
 * @since Podcaster 1.0
 */
if( ! function_exists('pod_load_javascript_files') ) {
	function pod_load_javascript_files() {

		$scriptsrc = get_template_directory_uri() . '/js/';

		/* Handles the responsive navigation */
		wp_register_script( 'thst-html5shi',	$scriptsrc . 'html5.js', array(), '1.0', false );
		wp_register_script( 'thst-respond',	$scriptsrc . 'respond.min.js', array(), '1.0', false );
		wp_register_script( 'thst-resmen', $scriptsrc . 'res_men.js', array(), '1.0', false	);
		wp_register_script( 'thst-modernizr', $scriptsrc . 'modernizr.js', array(), '1.0', false	);
		wp_register_script( 'thst-resize', $scriptsrc . 'pod-resize.js', array(), '1.0', false	);

		/* Handles the responsive videos */
		wp_register_script( 'thst-fitvid', $scriptsrc . 'jquery.fitvids.js', array('jquery'), '1.0', true );
		wp_register_script(	'thst-callfitvid', $scriptsrc . 'call_fitvid.js', array('jquery', 'thst-fitvid'), '1.0', true );

		/* Handles the responsive flexslider */
		wp_register_script(	'thst-flexslider', $scriptsrc . 'jquery.flexslider-min.js',	array('jquery'), '1.0', true );
		wp_register_script(	'thst-call-flexslider', $scriptsrc . 'call_flexslider.js', array('jquery', 'thst-flexslider'), '1.0', true );

		/* Handles responsive back top top button */
		wp_register_script( 'thst-mobcust', $scriptsrc . 'jquery.mobile.customized.min.js', array('jquery'), '1.0', true );
		wp_register_script(	'thst-mediaq', $scriptsrc . 'css3-mediaqueries.js', array(), '1.0', false );
		wp_register_script( 'thst-easing', $scriptsrc . 'jquery.easing.1.2.js', array('jquery'), '1.0', true );

		/* Handles Lightbox */
		wp_register_script( 'thst-lightjs', $scriptsrc . 'lightbox-2.6.min.js', array('jquery'), '2.6', true );

		/* Handles Masonry */
		wp_register_script( 'thst-imagesloaded', $scriptsrc . 'imagesloaded.pkgd.min.js', array('jquery'), '3.2.2', true );
		wp_register_script( 'thst-masonry', $scriptsrc . 'masonry.pkgd.min.js', array('jquery'), '3.2.2', true );
		wp_register_script( 'thst-callmasonry', $scriptsrc . 'call-masonry.js', array('jquery'), '1.0', true );

		/* Custom Scrollbars */
		wp_register_script( 'thst-contscr', $scriptsrc . 'jquery.mCustomScrollbar.min.js', array('jquery'), '2.8.3', true );
		wp_register_script( 'call-thst-contscr', $scriptsrc . 'call-contscr.js', array('jquery'), '2.8.3', true );

		/* Check for scrollbars (used for Gutenberg) */
		wp_register_script( 'thst-call-check-for-scrollbar', $scriptsrc . 'call-check-for-scrollbar.js', array('jquery'), '1.0', true );

		/* Handles Scrolling effects */
		wp_register_script( 'thst-call-scroll-casses', $scriptsrc . 'call-scroll-classes.js', array('jquery'), '1.0', true );

		global $is_IE;
		if ( $is_IE ) {
			wp_enqueue_script( 'thst-html5shi' );
			wp_enqueue_script( 'thst-respond' );
			wp_enqueue_script( 'thst-mediaq' );
		}

		wp_enqueue_script( 'thst-modernizr' );

		wp_enqueue_script( 'jquery' );
		wp_enqueue_script( 'jquery-ui-tabs' );
		wp_enqueue_script( 'thst-resmen' );
		wp_enqueue_script( 'thst-fitvid' );
		wp_enqueue_script( 'thst-callfitvid' );

		wp_enqueue_script( 'thst-flexslider' );

		/* Flexslider */
		$pod_flex_auto = pod_theme_option( 'pod-featured-header-slides-auto', false );
		$pod_flex_style = pod_theme_option( 'pod-featured-header-slides-style', 'slide' );

		$slide_options = array(
			'flex_auto' => ($pod_flex_auto) ? true : false,
			'flex_style' => $pod_flex_style,
		);
		wp_localize_script( 'thst-call-flexslider', 'podflex', $slide_options );

		wp_enqueue_script( 'thst-call-flexslider' );

		wp_enqueue_script( 'thst-easing' );
		wp_enqueue_script( 'thst-lightjs' );

		wp_enqueue_script( 'thst-contscr' );
		wp_enqueue_script( 'call-thst-contscr' );

		wp_enqueue_script( 'thst-imagesloaded' );
		wp_enqueue_script( 'thst-masonry' );
		wp_enqueue_script( 'thst-callmasonry' );

		wp_enqueue_script( 'thst-call-scroll-casses' );

		/* Activate Threaded Comments */
		if ( is_singular() && get_option( 'thread_comments' ) ){
			wp_enqueue_script( 'comment-reply' );
		}

		if( is_singular() && is_page_template( 'page/page-gutenberg.php' ) ) {
			wp_enqueue_script( 'thst-call-check-for-scrollbar' );
		}

		/* Resize & menu direction */
		$pod_is_rtl = pod_theme_option('pod-reading-direction', false);
		$rtl_options = array(
			'readdirection' => $pod_is_rtl,
		);
		wp_localize_script( 'thst-resize', 'podresize', $rtl_options );
		wp_enqueue_script( 'thst-resize' );
	}
}
add_action( 'wp_enqueue_scripts', 'pod_load_javascript_files' );

/**
 * pod_add_nofollow_cat()
 *
 * Replace rel attribute
 *
 * @param string $text rel attribute
 * @return string $text - string without rel attribute
 */
if( ! function_exists('pod_add_nofollow_cat') ){
	function pod_add_nofollow_cat( $text ) {
		$text = str_replace('rel="category tag"', "", $text);
		return $text;
	}
}
add_filter( 'the_category', 'pod_add_nofollow_cat' );

/**
 * pod_add_next_and_number()
 *
 * Add a "next" and "previous" link to the pagination.
 *
 * @param array $args An array of arguments for page links for paginated posts.
 * @return array $args arguments for page links with "next" and "previous" settings included.
 */
if( ! function_exists('pod_add_next_and_number') ){
	function pod_add_next_and_number($args){
	    if($args['next_or_number'] == 'next_and_number'){
	        global $page, $numpages, $multipage, $more, $pagenow;
	        $args['next_or_number'] = 'number';
	        $prev = '';
	        $next = '';

	        if ( $multipage ) {
	            if ( $more ) {
	                $i = $page - 1;
	                if ( $i && $more ) {
	                    $prev .= _wp_link_page($i);
	                    $prev .= $args['link_before']. $args['previouspagelink'] . $args['link_after'] . '</a>';
	                }
	                $i = $page + 1;
	                if ( $i <= $numpages && $more ) {
	                    $next .= _wp_link_page($i);
	                    $next .= $args['link_before']. $args['nextpagelink'] . $args['link_after'] . '</a>';
	                }
	            }
	        }
	        $args['before'] = $args['before'].$prev;
	        $args['after'] = $next.$args['after'];
	    }
	    return $args;
	}
}
add_filter('wp_link_pages_args','pod_add_next_and_number');

/**
 * podcaster_wp_title()
 *
 * Filters wp_title to print a neat <title> tag based on what is being viewed.
 *
 * @param string $title Default title text for current view.
 * @param string $sep Optional separator.
 * @return string The filtered title.
 */
if( ! function_exists( 'pod_wp_title' ) ) {
function pod_wp_title( $title, $sep ) {
	if ( is_feed() ) {
		return $title;
	}

	global $page, $paged, $title;

	// Add the blog name
	$title .= get_bloginfo( 'name', 'display' );

	// Add the blog description for the home/front page.
	$site_description = get_bloginfo( 'description', 'display' );

	if ( $site_description && ( is_home() || is_front_page() ) ) {
		$title .= " $sep $site_description";
	} elseif( is_single() || is_page() ) {
		// For Single Posts & Pages
		$title .= "  $sep " . get_the_title();
	}

	if ( ( $paged >= 2 || $page >= 2 ) && ! is_404() ) {
		// Add a page number if necessary:
		$title .= " $sep " . sprintf( __( 'Page %s', 'podcaster' ), max( $paged, $page ) );
	}

	return $title;

}
add_filter( 'wp_title', 'pod_wp_title', 10, 2 );
}

/**
 * Registers sidebars (or widget areas) across the website.
 *
 */
if( ! function_exists('pod_register_sidebars') ){
	function pod_register_sidebars() {
		register_sidebar(
			array(
				'id' => 'sidebar_blog',
				'name' => __( 'Sidebar Blog', 'podcaster' ),
				'description' => __( 'This sidebar will appear on your blog.', 'podcaster' ),
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h3>',
				'after_title' => '</h3>'
			)
		);
		register_sidebar(
			array(
				'id' => 'sidebar_single',
				'name' => __( 'Sidebar Single View', 'podcaster' ),
				'description' => __( 'This sidebar will appear on the single view of your blog.', 'podcaster' ),
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h3>',
				'after_title' => '</h3>'
			)
		);
		register_sidebar(
			array(
				'id' => 'sidebar_page',
				'name' => __( 'Sidebar Page', 'podcaster' ),
				'description' => __( 'This sidebar will appear on your pages.', 'podcaster' ),
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h3>',
				'after_title' => '</h3>'
			)
		);
		register_sidebar(
			array(
				'id' => 'sidebar_front',
				'name' => __( 'Sidebar Front Page', 'podcaster' ),
				'description' => __( 'This sidebar will appear on your front page.', 'podcaster' ),
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h3>',
				'after_title' => '</h3>'
			)
		);
	}
}
add_action( 'widgets_init', 'pod_register_sidebars' );


if( ! function_exists('pod_set_post_views') ) {
	function pod_set_post_views($postID) {
	    $count_key = 'post_views_count';
	    $count = get_post_meta( $postID, $count_key, true );
	    if( $count=='' ){
	        $count = 0;
	        delete_post_meta($postID, $count_key);
	        add_post_meta($postID, $count_key, '0');
	    } else {
	        $count++;
	        update_post_meta($postID, $count_key, $count);
	    }
	}
}
//To keep the count accurate, lets get rid of prefetching
remove_action( 'wp_head', 'adjacent_posts_rel_link_wp_head', 10, 0);

if ( ! function_exists('pod_get_post_views') ) {
	function pod_get_post_views($postID){
	    $count_key = 'post_views_count';
	    $count = get_post_meta( $postID, $count_key, true );

	    if( $count=='' ){
	        delete_post_meta( $postID, $count_key );
	        add_post_meta( $postID, $count_key, '0' );
	        return __('0 View', 'podcaster');
	    }
	    return $count. __(' Views', 'podcaster');
	}
}

/**
 *
 * Add it to a column in WP-Admin.
 * @return $defaults
 */
if( ! function_exists('pod_posts_column_views') ){
	function pod_posts_column_views($defaults){
	    $defaults['post_views'] = __('Views', 'podcaster');
	    return $defaults;
	}
}
add_filter('manage_posts_columns', 'pod_posts_column_views');

if( ! function_exists('pod_posts_custom_column_views') ){
	function pod_posts_custom_column_views($column_name, $id){
		if($column_name === 'post_views'){
	        echo pod_get_post_views(get_the_ID());
	    }
	}
}
add_action('manage_posts_custom_column', 'pod_posts_custom_column_views',5,2);


/**
 * pod_get_avatar_url()
 * Get Avatar URL
 *
 * @param string $get_avatar Get the url of the avatar.
 * @return string $matches If an avatar is found.
 */
if( ! function_exists( 'pod_get_avatar_url' ) ) {
	function pod_get_avatar_url($get_avatar){
		if ( get_option( 'show_avatars' ) ){
	    preg_match("/src='(.*?)'/i", $get_avatar, $matches);
	    return $matches[1];
		} else {
			return;
		}
	}
}

/**
 * pod_get_plugin_active()
 * Finds out which plugin for podcasting is active.
 *
 * @return string $plgn appreviated name of the plugin.
 */
if( ! function_exists('pod_get_plugin_active') ) {
	function pod_get_plugin_active() {

		$plgn = '';

		if( class_exists( 'SSP_Admin' ) || function_exists( 'ss_get_podcast' ) ) {
			$plgn = 'ssp';
		} elseif( function_exists('powerpress_content') ) {
			$plgn = 'bpp';
		} elseif( function_exists('pod_media_player') ) {
			$plgn = 'podm';
		} else {
			$plgn = '';
		}

		return $plgn;
	}
}
add_action( 'plugins_loaded', 'pod_get_plugin_active' );

/**
 * pod_is_ssp_active()
 * Finds out which plugin for podcasting is active.
 *
 * @return string $plgn appreviated name of the plugin.
 */
if( ! function_exists('pod_is_ssp_active') ) {
	function pod_is_ssp_active() {

		if( class_exists( 'SSP_Admin' ) || function_exists( 'ss_get_podcast' ) ) {
			return true;
		} 

		return false;
	}
}
add_action( 'plugins_loaded', 'pod_is_ssp_active' );

/**
 * pod_is_rf_active()
 * Finds out if Redux Framework is active.
 *
 * @return boolean.
 */
if( ! function_exists('pod_is_rf_active') ) {
	function pod_is_rf_active() {

		if( class_exists('ReduxFramework') || class_exists('Kirki') ) {
			return true;
		}
		return false;
	}
}
add_action( 'plugins_loaded', 'pod_is_rf_active' );


/**
 * pod_theme_option()
 * Gets theme options values from Redux Framework and checks if they are set
 *
 * @param string $id - ID of the value.
 * @param string $ivalue - Default Value of the theme option (optional).
 * @return string $var - Value of theme option.
 */
if( ! function_exists('pod_theme_option') ) {
	function pod_theme_option($id, $value = '') {
		$options = get_option('podcaster-theme');

		$var = isset( $options[$id] ) ? $options[$id] : $value;
		return $var;
	}
}

/**
 * pod_get_att_id()
 * Gets attachment id by when URL is given.
 *
 * @param string $att_url - URL of attrachment.
 * @return string $attachment - Attachment ID.
 */
if( ! function_exists('pod_get_att_id') ){
	function pod_get_att_id($att_url) {
		global $wpdb;
		$attachment = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE guid='%s';", $att_url ));
	        return $attachment[0];
	}
}

/**
 * pod_post_format()
 * Adds CSS class to standard format posts.
 *
 * @return string $output - CSS class.
 */
if( ! function_exists('pod_post_format') ) {
	function pod_post_format() {
		if( is_single() ){
			$pformat = get_post_format();

			if( $pformat == '' ) {
				$pformat = 'standard';
			}
			$output = 'format-' . $pformat;
			return $output;
		}
	}
}

/**
 * pod_allow_skype_protocol()
 * Adds the "skype" protcol to the allowed WP protcols.
 *
 * @return array $protocols - an array containing the new protocols.
 */
if( ! function_exists( 'pod_allow_skype_protocol' ) ){
	function pod_allow_skype_protocol( $protocols ){
	    $protocols[] = 'skype';
	    return $protocols;
	}
}
add_filter( 'kses_allowed_protocols' , 'pod_allow_skype_protocol' );




if( !function_exists( 'pod_is_active_demo_install' ) ){
	function pod_is_active_demo_install() {

		// Detect plugin.
		if (  class_exists( 'OCDI_Plugin' ) ) {
		    return true;
		}
		return false;
	}
}


if( !function_exists( 'pod_is_active_redux' ) ){
	function pod_is_active_redux() {

		// Detect plugin.
		if ( class_exists( 'ReduxFrameworkPlugin' ) ) {
		    return true;
		}
		return false;
	}
}

if( ! function_exists( 'pod_get_redux_version' ) ){
	function pod_get_redux_version() {
		if ( is_admin() && pod_is_active_redux() ) {
		    if( ! function_exists( 'get_plugin_data' ) ) {
		        require_once( trailingslashit(ABSPATH) . 'wp-admin/includes/plugin.php' );
		    }
		    $redux_path = trailingslashit(ABSPATH) . "wp-content/plugins/redux-framework/redux-framework.php";
			$plugin_data = get_plugin_data($redux_path);

		    return $plugin_data["Version"];
		}
	}
}


/**
* Disable page templates that aren't needed.
*
* @param array $page_templates List of currently active page templates.
*
* @return array Modified list of page templates.
*/
if( ! function_exists( 'pod_disable_page_templates' ) ){
	function pod_disable_page_templates( $page_templates ) {

		if( pod_get_redux_version() > 4 ){

		    unset( $page_templates['redux-templates_contained'] );
		    unset( $page_templates['redux-templates_full_width'] );
		    unset( $page_templates['redux-templates_canvas'] );
		}

	    return $page_templates;
	}
}
if( pod_is_active_redux() ) {
	add_filter( 'theme_page_templates', 'pod_disable_page_templates', 20 );
	add_filter( 'theme_post_templates', 'pod_disable_page_templates', 20 );
}


/**
* Dequeue scripts that embed currently unneeded blocks.
*
* @return array Modified list of page templates.
*/
if( ! function_exists( 'pod_disable_blocks' ) ){
	function pod_disable_blocks() {
		if( is_admin() && pod_get_redux_version() > 4 ){
			wp_dequeue_script( 'redux-templates-js-vendor' );
			wp_dequeue_script( 'redux-templates-js' );
			wp_dequeue_script( 'redux-templates' );
		}
	}
}
if( pod_is_active_redux() ) {
	add_action( 'admin_enqueue_scripts', 'pod_disable_blocks', 100 );
}


/**
 * thst_user_contactmethods()
 * Add more fields to the contact info form.
 *
 * @param array $user_contactmethods - Default user contact methods.
 * @return array $$user_contactmethods - Added new user contact methods.
 */
if( ! function_exists('thst_user_contactmethods') ) {
    function thst_user_contactmethods($user_contactmethods){

    $user_contactmethods['contact_email'] = 'Contact Email';
    $user_contactmethods['user_position'] = 'Position';
    $user_contactmethods['user_rss'] = 'RSS';
    $user_contactmethods['user_twitter'] = 'Twitter';
    $user_contactmethods['user_facebook'] = 'Facebook';
    $user_contactmethods['user_googleplus'] = 'Google';
    $user_contactmethods['user_instagram'] = 'Instagram';
    $user_contactmethods['user_snapchat'] = 'Snapchat';


    $user_contactmethods['user_tiktok'] = 'TikTok';
    $user_contactmethods['user_periscope'] = 'Periscope';
    $user_contactmethods['user_telegram'] = 'Telegram';


    $user_contactmethods['user_itunes'] = 'iTunes';
    $user_contactmethods['user_soundcloud'] = 'Soundcloud';
    $user_contactmethods['user_mixcloud'] = 'Mixcloud';
    $user_contactmethods['user_spotify'] = 'Spotify';


    $user_contactmethods['user_apple_podcasts'] = 'Apple Podcasts';
    $user_contactmethods['user_stitcher'] = 'Stitcher';
    $user_contactmethods['user_iheartradio'] = 'iHeart Radio';
    $user_contactmethods['user_google_podcasts'] = 'Google Podcasts';


	$user_contactmethods['user_tumblr'] = 'Tumblr';

	$user_contactmethods['user_medium'] = 'Medium';

	
	$user_contactmethods['user_pinterest'] = 'Pinterest';
	$user_contactmethods['user_flickr'] = 'Flickr';
	$user_contactmethods['user_youtube'] = 'Youtube';
	$user_contactmethods['user_vimeo'] = 'Vimeo';
	$user_contactmethods['user_twitch'] = 'Twitch';


	$user_contactmethods['user_android'] = 'Android';


	$user_contactmethods['user_skype'] = 'Skype';
	$user_contactmethods['user_whatsapp'] = 'Whatsapp';
	$user_contactmethods['user_dribbble'] = 'Dribbble';
	$user_contactmethods['user_weibo'] = 'Weibo';
	
	
	$user_contactmethods['user_patreon'] = 'Patreon';
	$user_contactmethods['user_paypal'] = 'Paypal';
	$user_contactmethods['user_foursquare'] = 'Foursquare';
	
	
	$user_contactmethods['user_linkedin'] = 'Linkedin';
	$user_contactmethods['user_xing'] = 'Xing';
	$user_contactmethods['user_github'] = 'Github';
	$user_contactmethods['user_stackex'] = 'Stack Exchange';

    return $user_contactmethods;
    }
}
add_filter('user_contactmethods', 'thst_user_contactmethods');


/**
 * Recommended Plugins
 */
require_once ( get_template_directory() .'/functions/tgmpa/reccommend_plg.php' );

/**
 * One Click Imprt
 */
if( class_exists('ReduxFramework') ) {
	include_once( get_template_directory() . '/includes/demo-data-old/pod-one-click-import.php' );
} 


/**
 * List Comments
 */
include_once( get_template_directory() . '/thst-listcomments.php' );



/**
 * Lists images when gallery is inserted into post or page
 */
$options = get_option('podcaster-theme');
if( is_array( $options ) && isset( $options["pod-pofo-gallery"] ) ) {

	$pofo_gallery_style = pod_theme_option( 'pod-pofo-gallery', 'slideshow_on' );

	if ( $pofo_gallery_style == "slideshow_on" ) {
		include_once( get_template_directory() . '/thst-gallery_slide.php' );
	} else {
		include_once( get_template_directory() . '/thst-gallery_grid.php' );
	}
}

/**
 * Parallax
 */
include_once( get_template_directory() . '/includes/parallax/pod-parallax.php' );


/**
 * Theme functions
 */
include_once( get_template_directory() . '/functions/pod-theme-option-functions.php');
include_once( get_template_directory() . '/functions/pod-ssp-theme-functions.php');
include_once( get_template_directory() . '/functions/pod-theme-functions.php');
include_once( get_template_directory() . '/functions/pod-post-editor-functions.php');

/* Ajax Loader */
include_once( get_template_directory() . '/pod-ajax-functions.php');


/**
 * Admin Notices
 */
include_once( get_template_directory() . '/functions/pod-admin-notices.php' );
 ?>